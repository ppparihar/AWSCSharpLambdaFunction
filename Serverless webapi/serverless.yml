service: WebapiLambdaFunction
package:
    artifact: bin/Release/netcoreapp1.0/publish.zip
provider:
  name: aws
  runtime: dotnetcore1.0
  stage: ${opt:stage} #read from console input
  region: us-east-1
  profile: default #this is the AWS credentials profile, change this.. or pass AWS credentials in the command line (not recommended)
  #role: arn:aws:iam::<myAWSAccId>:role/serverless_getting_started
  memorySize: 128 # Overwrite the default memory size. Default is 1024
  timeout: 100 #default is 6
  #deploymentBucket: myBucketName.${self:provider.region}.deploys #I recommend leave this commented out, serverless will create a bucket for you if this is not given
  versionFunctions: false
  stackTags:
   Environment: ${opt:stage} #helpful for billing
  stackPolicy: # Optional CF stack policy. The example below allows updates to all resources except deleting/replacing EC2 instances (use with caution!)
    - Effect: Allow
      Principal: "*"
      Action: "Update:*"
      Resource: "*"
    - Effect: Deny
      Principal: "*"
      Action:
        - Update:Replace
        - Update:Delete
      Condition:
        StringEquals:
          ResourceType:
            - AWS::EC2::Instance

functions:
  WebapiLambdaFunction:
    name: ${opt:stage}WebapiLambdaFunction
    handler: WebapiLambdaFunction::WebapiLambdaFunction.LambdaFunction::FunctionHandlerAsync
    events:
      - http:
          path: "/{proxy+}"
          method: ANY

# The "Resources" your "Functions" use.  Raw AWS CloudFormation goes in here.

#serverless deploy --stage dev --region us-east-1

